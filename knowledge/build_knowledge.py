"""
–°–æ–±–∏—Ä–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ *.md –≤ –ø–∞–ø–∫–µ input
–∏ –ø–æ–º–µ—â–∞–µ—Ç –µ—ë –≤ —Ñ–∞–π–ª output/knowledge.md
"""
import datetime as dt
from dataclasses import dataclass
from pathlib import Path


THIS_PATH = Path(__file__).parent
INPUT_PATH = THIS_PATH / 'input'
OUT_KNOWLEDGE_FILE = THIS_PATH / 'output/knowledge.md'
OUT_TOC_FILE = THIS_PATH / 'output/toc.md'


@dataclass
class Header:
    level: int
    title: str
    is_printed: bool = False


def header_block(headers) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    """
    out_lines = []

    for header in headers:
        if header.is_printed:
            continue

        # –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Ä–∫–¥–∞—É–Ω–∞
        out_lines.append(
            f'{"#" * header.level} {header.title}'
        )
        header.is_printed = True

    # –≤—ã–≤–æ–¥–∏–º —Ü–µ–ø–æ—á–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–±–µ–∑ '#')
    for header in headers:
        out_lines.append(header.title)

    # –≤—ã–≤–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —ç—Ç–æ–π —Å–µ–∫—Ü–∏–µ–π –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    # out_lines.append('')

    return out_lines


def process_file(md_file: Path) -> list[str]:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ñ–∞–π–ª–∞ md_file.
    –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–æ —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ.
    –í –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–¥–µ—Ç –≤ —á–∞–Ω–∫.
    """
    with open(md_file, 'r', encoding='utf-8') as f:
        text = f.read()

    out_lines = []

    headers = []  # —Å—Ç–µ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ
    for line in text.split('\n'):
        if line.startswith('#'):  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏

            # —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ '#' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            level = len(line) - len(line.lstrip('#'))

            # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ
            while headers and level <= headers[-1].level:
                headers.pop()

            # —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ - —Ç–æ, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ '#'
            title = line[level:].strip()

            h = Header(level, title)
            headers.append(h)

        else:  # —Å–ª—É—á–∞–π —Å—Ç—Ä–æ–∫–∏-–Ω–µ-–∑–∞–≥–æ–ª–æ–≤–∫–∞
            if headers and not headers[-1].is_printed:
                out_lines += header_block(headers)
            out_lines.append(line)

    return out_lines


def build_knowledge(md_files, md_file_names, *, add_debug=False) -> Path:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ md_files.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    if len(md_files) != len(md_file_names):
        raise ValueError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –∏–º–µ–Ω –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å')

    now = dt.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
    out_lines = []
    if add_debug:
        out_lines = [
            f'üîµ –≠—Ç–æ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω {Path(__file__).name}, {now}'
        ]

    for i, md_file in enumerate(md_files):
        if add_debug:
            out_lines.append(
                f'\n'
                f'üîµ {md_file_names[i]}\n'
            )
        out_lines += process_file(md_file)

    out_text = '\n'.join(out_lines) + '\n'

    if add_debug:
        file_path = OUT_KNOWLEDGE_FILE.with_suffix('.debug.md')
    else:
        file_path = OUT_KNOWLEDGE_FILE

    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(out_text)

    return file_path


def extract_headers(md_file: Path, *, fname_str=None) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ md_file –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        md_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        fname_str: –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    """
    with open(md_file, 'r', encoding='utf-8') as f:
        text = f.read()

    out_lines = []

    if fname_str:
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        out_lines.append(
            f'- üîµ {fname_str}'
        )
        extra_level = 1
    else:
        extra_level = 0

    for line in text.split('\n'):
        if line.startswith('#'):  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏

            # —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ '#' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            level = len(line) - len(line.lstrip('#'))

            # —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ - —Ç–æ, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ '#'
            title = line[level:].strip()

            # –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            indent = '  ' * (level - 1 + extra_level)

            out_lines.append(
                f'{indent}- {title}'
            )

    return out_lines


def build_toc(md_files, md_file_names) -> Path:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ md_files. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    if len(md_files) != len(md_file_names):
        raise ValueError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –∏–º–µ–Ω –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å')

    now = dt.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
    out_lines = [
        f'üîµ –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω {Path(__file__).name}, {now}\n'
    ]

    for i, md_file in enumerate(md_files):
        out_lines += extract_headers(md_file, fname_str=md_file_names[i])

    out_text = '\n'.join(out_lines) + '\n'
    with open(OUT_TOC_FILE, 'w', encoding='utf-8') as f:
        f.write(out_text)

    return OUT_TOC_FILE


def main():
    # —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ *.md –≤ –ø–∞–ø–∫–µ INPUT_PATH
    # md_files = list(INPUT_PATH.glob('**/*.md'))
    # md_file_names = [f.relative_to(INPUT_PATH) for f in md_files]

    # —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–æ–π –ø–æ—Ä—è–¥–æ–∫ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ñ–∞–π–ª–µ:
    md_file_names = [
        'info_oferta.md',
        'info_instruction.md',
        'info_personal_data.md',
        'info_privacy_policy.md',
        'info_agreement.md',
        'info_faq.md',
        'info_payments.md',
        'info_contacts.md',
    ]
    md_files = [INPUT_PATH / f for f in md_file_names]

    fname = build_knowledge(md_files, md_file_names, add_debug=True)
    print('–°–æ–∑–¥–∞–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª:   ', fname)

    fname = build_knowledge(md_files, md_file_names)
    print('–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:  ', fname)

    fname = build_toc(md_files, md_file_names)
    print('–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º:', fname)


if __name__ == "__main__":
    main()
